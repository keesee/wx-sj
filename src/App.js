import React, { Component } from 'react';
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import Typography from '@material-ui/core/Typography';

// This was renamed.  Students have tempurature.js (misspelled) :(
import Temp from './Temp'

import './App.css'; // REMOVE THIS we only need index.css (also)
// also clean up the rest of your files.  
// App.test, logo.svg, App.css are no longer needed.  they were generated by create-react-app

class App extends Component {

  constructor(props) {
    super(props);

    this.state = {
      savedLocations: [], 
      currentLocation: '',
      currentLocationDataWx: {},
    }
  }


  ///////////////////////////////////////////////////////////////////////////////////
  // Lifecycle //////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////

  componentWillMount() {
    console.log("I'm will be born!")
    console.log(this.state) // should be our default initial state.  No data

    // Set state on component will mount for 
    // us to be able to experiment with
    // we'll push it into a couple of component 
    // to understand the difference between props and state

    // use handleChangeCity to set location to chengdu
    this.handleChangeCity('Chengdu') 
    // fake data with the most basic high/low values
    this.handleChangeCityData({
      tempHigh: 7,
      tempLow: 0
    })
  }

  
  componentDidMount() {
    console.log("I'm born!")
    console.log(this.state)
  }

  componentWillUnmount() {
    console.log('I will die')
  }

  
  ///////////////////////////////////////////////////////////////////////////////////
  // Methods ////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////

  handleChangeCity(newCity) {// 'chengdu'
    this.setState({ 
      currentLocation:newCity 
    })
    console.log('the city has been changed to ', newCity)
  }

  handleCurrentCityClear() {
    this.handleChangeCity('')
  }

  handleChangeCityData(cityData) {
    this.setState({ currentLocationDataWx: cityData })
  }

  ///////////////////////////////////////////////////////////////////////////////////
  // Renderer ///////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////

  render() {

    let nameOfCity = ''

    if (this.state.currentLocation) {
      nameOfCity = this.state.currentLocation
    } else {
      nameOfCity = 'Select Location'
    }

    let tempHigh = this.state.currentLocationDataWx.tempHigh
    var tempLow = this.state.currentLocationDataWx.tempLow

    return (
      <div className="App">
        <AppBar position="static" color="default">
          <Toolbar>
            <Typography variant="h6" color="inherit">
              {nameOfCity}
            </Typography>
          </Toolbar>
        </AppBar>

        <Temp value={tempHigh} unit='c' />
        <Temp value={tempLow} unit='c' />

      </div>
    );
  }
}

export default App;
